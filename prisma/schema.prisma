// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enum para os tipos de usuário
enum UserRole {
  ADMIN
  MANAGER
  EMPLOYEE
}

// Enum para os tipos de registro de ponto
enum PunchType {
  ENTRY
  EXIT
  BREAK_START
  BREAK_END
}

// Enum para os tipos de plantão
enum ShiftType {
  REGULAR
  NIGHT
  TWELVE_THIRTY_SIX
  TWENTY_FOUR_FORTY_EIGHT
  CUSTOM
}

// Enum para o status das solicitações de ajuste
enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
}

// Enum para os tipos de ação no log de auditoria
enum ActionType {
  CREATE
  UPDATE
  DELETE
  LOGIN
  LOGOUT
  PUNCH_RECORD
  APPROVE_REQUEST
  REJECT_REQUEST
  GENERATE_REPORT
}

// Modelo de Empresa
model Company {
  id        String   @id @default(uuid())
  name      String
  logoUrl   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacionamentos
  users User[]

  @@map("companies")
}

// Modelo de Usuário
model User {
  id        String    @id @default(uuid())
  name      String
  email     String    @unique
  password  String
  role      UserRole  @default(EMPLOYEE)
  active    Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  // Relacionamentos
  company             Company            @relation(fields: [companyId], references: [id])
  companyId           String
  scheduleGroup       ScheduleGroup?     @relation(fields: [scheduleGroupId], references: [id])
  scheduleGroupId     String?
  customSchedule      CustomSchedule?
  punchRecords        PunchRecord[]
  shifts              Shift[]
  adjustmentRequests  AdjustmentRequest[]
  reports             Report[]
  auditLogs           AuditLog[]

  @@map("users")
}

// Modelo de Grupo de Jornada
model ScheduleGroup {
  id            String   @id @default(uuid())
  name          String
  entryTime     String   // Formato HH:MM
  exitTime      String   // Formato HH:MM
  breakDuration Int      // Duração em minutos
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relacionamentos
  users User[]
  company       Company  @relation(fields: [companyId], references: [id])
  companyId     String

  @@map("schedule_groups")
}

// Modelo de Jornada Personalizada
model CustomSchedule {
  id            String   @id @default(uuid())
  entryTime     String   // Formato HH:MM
  exitTime      String   // Formato HH:MM
  breakDuration Int      // Duração em minutos
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relacionamentos
  user          User     @relation(fields: [userId], references: [id])
  userId        String   @unique

  @@map("custom_schedules")
}

// Modelo de Registro de Ponto
model PunchRecord {
  id        String    @id @default(uuid())
  timestamp DateTime
  type      PunchType
  latitude  Float?
  longitude Float?
  deviceInfo String?
  createdAt DateTime  @default(now())
  
  // Relacionamentos
  user      User      @relation(fields: [userId], references: [id])
  userId    String

  @@map("punch_records")
}

// Modelo de Plantão
model Shift {
  id        String    @id @default(uuid())
  date      DateTime
  shiftType ShiftType
  startTime String    // Formato HH:MM
  endTime   String    // Formato HH:MM
  notes     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  // Relacionamentos
  user      User      @relation(fields: [userId], references: [id])
  userId    String

  @@map("shifts")
}

// Modelo de Solicitação de Ajuste
model AdjustmentRequest {
  id        String        @id @default(uuid())
  date      DateTime
  reason    String
  fileUrl   String?
  status    RequestStatus @default(PENDING)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  
  // Relacionamentos
  user      User          @relation(fields: [userId], references: [id])
  userId    String
  
  // Campos adicionais para aprovação/rejeição
  reviewedBy String?
  reviewedAt DateTime?
  reviewNotes String?

  @@map("adjustment_requests")
}

// Modelo de Relatório
model Report {
  id        String   @id @default(uuid())
  pdfUrl    String
  startDate DateTime
  endDate   DateTime
  type      String   // Tipo de relatório (mensal, semanal, etc.)
  createdAt DateTime @default(now())
  
  // Relacionamentos
  user      User     @relation(fields: [userId], references: [id])
  userId    String

  @@map("reports")
}

// Modelo de Log de Auditoria
model AuditLog {
  id         String     @id @default(uuid())
  actionType ActionType
  metadata   Json       // Dados adicionais sobre a ação
  ipAddress  String?
  createdAt  DateTime   @default(now())
  
  // Relacionamentos
  user       User       @relation(fields: [userId], references: [id])
  userId     String

  @@map("audit_logs")
}

