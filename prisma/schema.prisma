// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String
  role      Role     @default(EMPLOYEE)
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  company   Company @relation(fields: [companyId], references: [id])
  companyId String

  // Relações
  timeEntries      TimeEntry[]
  adjustmentRequests AdjustmentRequest[]
  managedAdjustments AdjustmentRequest[] @relation("Manager")
  subordinates     User[]        @relation("ManagerToEmployee")
  manager          User?         @relation("ManagerToEmployee", fields: [managerId], references: [id])
  managerId        String?

  shiftGroup       ShiftGroup?   @relation(fields: [shiftGroupId], references: [id])
  shiftGroupId     String?
  
  shiftType        ShiftType?    @relation(fields: [shiftTypeId], references: [id])
  shiftTypeId      String?
  
  // Configurações individuais de jornada (se não usar grupo)
  startTime        String?       // Formato HH:mm
  endTime          String?       // Formato HH:mm
  breakDuration    Int?          // Em minutos

  @@map("users")
}

enum Role {
  EMPLOYEE
  MANAGER
  ADMIN
}

model Company {
  id        String   @id @default(uuid())
  name      String
  logoUrl   String?
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relações
  users       User[]
  shiftGroups ShiftGroup[]
  shiftTypes  ShiftType[]

  @@map("companies")
}

model ShiftGroup {
  id            String   @id @default(uuid())
  name          String
  startTime     String   // Formato HH:mm
  endTime       String   // Formato HH:mm
  breakDuration Int      // Em minutos
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relações
  company   Company @relation(fields: [companyId], references: [id])
  companyId String
  users     User[]

  @@map("shift_groups")
}

model ShiftType {
  id          String   @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relações
  company   Company @relation(fields: [companyId], references: [id])
  companyId String
  users     User[]

  @@map("shift_types")
}

model TimeEntry {
  id        String     @id @default(uuid())
  type      EntryType
  timestamp DateTime   @default(now())
  latitude  Float?     // Nova coluna para latitude
  longitude Float?     // Nova coluna para longitude
  accuracy  Float?     // Nova coluna para precisão em metros
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  // Relações
  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@map("time_entries")
}

enum EntryType {
  CLOCK_IN
  BREAK_START
  BREAK_END
  CLOCK_OUT
}

model AdjustmentRequest {
  id          String            @id @default(uuid())
  date        DateTime
  entryType   EntryType
  requestedTime String          // Formato HH:mm
  reason      String
  attachmentUrl String?
  status      AdjustmentStatus  @default(PENDING)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  // Relações
  user        User              @relation(fields: [userId], references: [id])
  userId      String
  manager     User?             @relation("Manager", fields: [managerId], references: [id])
  managerId   String?
  
  // Campos para aprovação/rejeição
  responseComment String?
  responseDate    DateTime?

  @@map("adjustment_requests")
}

enum AdjustmentStatus {
  PENDING
  APPROVED
  REJECTED
}

model Report {
  id        String   @id @default(uuid())
  month     Int
  year      Int
  fileUrl   String
  accessedAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relações
  userId    String

  @@map("reports")
}

model AuditLog {
  id        String    @id @default(uuid())
  action    String
  entityType String
  entityId  String?
  details   String?
  ipAddress String?
  createdAt DateTime  @default(now())
  
  // Relações
  userId    String

  @@map("audit_logs")
}

